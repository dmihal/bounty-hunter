{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BountyHunter","truffleContract","bountyArtifact","setProvider","window","ethereum","ERC20","erc20artifact","App","state","created","held","won","account","token","reward","web3","Web3","deployed","this","contract","loadData","eth","getAccounts","Promise","all","getPastEvents","filter","creator","fromBlock","toBlock","to","user","addData","_callee2","event","info","tokenName","regenerator_default","a","wrap","_context2","prev","next","_this2","getBountyInfo","returnValues","id","sent","at","name","call","currentHolder","t0","t1","t2","t3","t4","t5","t6","t7","t8","t9","extraData","holder","winner","winnerConfirmed","canceled","steps","abrupt","stop","map","setState","createBounty","from","value","receipt","console","log","_this3","react_default","createElement","AppBar_default","position","color","Toolbar_default","Typography_default","variant","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","ExpansionPanelDetails_default","TextField_default","label","onChange","e","target","utils","fromWei","toWei","type","InputLabelProps","shrink","inputProps","min","step","margin","Button_default","onClick","style","flexDirection","bounty","App_Bounty","Component","Bounty","_ref6","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setNext","hasWinner","Paper_default","padding","toString","react","asyncToGenerator","mark","_callee5","_context5","confirm","lib_default","delay","onScan","address","replace","substr","width","maxWidth","_callee6","_ref9","logs","_context6","passBounty","alert","concat","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc409ea0.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport truffleContract from 'truffle-contract';\nimport Web3 from 'web3';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport QrReader from 'react-qr-reader';\n\nimport bountyArtifact from '../../build/contracts/BountyHunter.json';\nimport erc20artifact from '../../build/contracts/ERC20.json';\n\nconst BountyHunter = truffleContract(bountyArtifact);\nBountyHunter.setProvider(window.ethereum);\nconst ERC20 = truffleContract(erc20artifact);\nERC20.setProvider(window.ethereum);\n\nclass App extends Component {\n\n  state = {\n    created: [],\n    held: [],\n    won: [],\n\n    account: null,\n\n    token: '',\n    reward: '0',\n  }\n  web3 = new Web3(window.ethereum);\n\n\n  async componentDidMount() {\n    this.contract = await BountyHunter.deployed();    \n    this.loadData();\n  }\n\n  async loadData() {\n    const [account] = await this.web3.eth.getAccounts();\n\n    const [created, held, won] = await Promise.all([\n      this.contract.getPastEvents('BountyCreated', { filter: {creator: account }, fromBlock: '0', toBlock: 'latest' }),\n      this.contract.getPastEvents('BountyPassed', { filter: {to: account }, fromBlock: '0', toBlock: 'latest' }),\n      this.contract.getPastEvents('BountyWon', { filter: {user: account }, fromBlock: '0', toBlock: 'latest' }),\n    ]);\n    const addData = async (event) => {\n      const info = await this.contract.getBountyInfo(event.returnValues.id);\n      const tokenName = await (await ERC20.at(info[0])).name.call();\n      event.extraData = {\n        holder: await this.contract.currentHolder(event.returnValues.id),\n        token: info[0],\n        tokenName,\n        creator: info[1],\n        winner: info[2],\n        created: info[3],\n        reward: info[4],\n        winnerConfirmed: info[5],\n        canceled: info[6],\n        steps: info[7],\n      };\n      return event;\n    }\n    this.setState({\n      account,\n      created: await Promise.all(created.map(addData)),\n      held: await Promise.all(held.map(addData)),\n      won: await Promise.all(won.map(addData)),\n    });\n  }\n\n  async createBounty() {\n    const receipt = await this.contract.createBounty(this.state.token, { from: this.state.account, value: this.state.reward });\n    console.log(receipt);\n    this.loadData();\n  }\n\n  render() {\n    const { account } = this.state;\n    return (\n      <div>\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n              Bounty Hunter\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <ExpansionPanel>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography>Create Bounty</Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <TextField\n              label=\"Token Address\"\n              value={this.state.token}\n              onChange={e => this.setState({ token: e.target.value })}\n              variant=\"filled\"\n            />\n            <TextField\n              label=\"Reward (ETH)\"\n              value={this.web3.utils.fromWei(this.state.reward, 'ether')}\n              onChange={e => this.setState({ reward: this.web3.utils.toWei(e.target.value, 'ether') })}\n              type=\"number\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              inputProps={{\n                min: '0',\n                step: '0.05',\n              }}\n              margin=\"normal\"\n              variant=\"filled\"\n            />\n            <Button onClick={() => this.createBounty()}>Create Bounty</Button>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n\n        <ExpansionPanel>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography>Bounties Received</Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails style={{flexDirection: 'column'}}>\n\n            {this.state.held.map(bounty => <Bounty bounty={bounty} contract={this.contract} web3={this.web3} account={account} loadData={() => this.loadData()} />)}\n            {this.state.won.map(bounty => <Bounty bounty={bounty} contract={this.contract} web3={this.web3} account={account} loadData={() => this.loadData()} />)}\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n\n        <ExpansionPanel>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography>Bounties Created</Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails style={{flexDirection: 'column'}}>\n\n            {this.state.created.map(bounty => <Bounty bounty={bounty} contract={this.contract} web3={this.web3} account={account} loadData={() => this.loadData()} />)}\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </div>\n    );\n  }\n}\n\nconst Bounty = ({ bounty, contract, web3, account, loadData }) => {\n  const [next, setNext] = React.useState('');\n  const hasWinner = bounty.extraData.winner !== '0x0000000000000000000000000000000000000000';\n  return (\n    <Paper style={{padding: '5px', margin:'5px'}}>\n      <Typography>#{bounty.returnValues.id}: Searching for a {bounty.extraData.tokenName} holder</Typography>\n      <Typography>Prize: {web3.utils.fromWei(bounty.extraData.reward.toString(), 'ether')} ETH, distributed among everyone who passed the bounty</Typography>\n      {!hasWinner && <Typography>Current holder: {bounty.extraData.holder}</Typography>}\n      <Typography>This token has passed through {bounty.extraData.steps.toString()} addresses</Typography>\n\n      {hasWinner && (bounty.extraData.winner === account ? (\n        <Fragment>\n          <Typography>You won!</Typography>\n          {!bounty.extraData.winnerConfirmed && (\n            <Button onClick={async () => contract.confirm(bounty.returnValues.id)}>Confirm to receive your prize</Button>\n          )}\n        </Fragment>\n      ) : (\n        bounty.extraData.winnerConfirmed ? <Typography>This bounty is closed</Typography> : <Typography>Prizes awarded when {bounty.extraData.winner} confirms</Typography>\n      ))}\n\n      {bounty.extraData.holder === account && !hasWinner && (\n        <Fragment>\n          <TextField\n            label=\"Next person...\"\n            value={next}\n            onChange={e => setNext(e.target.value)}\n            variant=\"filled\"\n          />\n          <QrReader\n            delay={300}\n            onScan={address => address && setNext(address.replace('ethereum:','').substr(0,42))}\n            style={{ width: '100%', maxWidth: '250px' }}\n          />\n          <Button onClick={async () => {\n            const { logs } = await contract.passBounty(bounty.returnValues.id, next, { from: account });\n            if (logs[0].event === 'BountyWon') {\n              alert(`You won! You found the token holder!\\nYou will receive your reward once ${logs[0].returnValues.user} confirms.`)\n            }\n            loadData();\n          }}>Pass Bounty</Button>\n        </Fragment>\n      )}\n    </Paper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}